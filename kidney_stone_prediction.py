# -*- coding: utf-8 -*-
"""Kidney_stone_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LGor87iI4wg29szpEvSec48xi3Ey-xbt
"""

import pandas as pd
import numpy as np
import xgboost as xgb
from sklearn.model_selection import train_test_split
from sklearn.metrics import balanced_accuracy_score, roc_auc_score, make_scorer
from sklearn.metrics import accuracy_score
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report, accuracy_score, confusion_matrix



df= pd.read_csv('/content/dataset-kidney-stone-1.csv')
df.head()

print(df)



X=df.drop('target', axis=1).copy()
y=df['target'].copy()

y.head()

X.dtypes

X_train, X_test, y_train, y_test= train_test_split(X, y, test_size=0.2, random_state=42)

clf_xgb=xgb.XGBClassifier(objective="binary:logistic",
     eval_metric="logloss",
     learning_rate=0.1,
     max_depth=4,
     n_estimators=200



                          )
clf_xgb.fit(
    X_train,
    y_train,
    eval_set=[(X_test, y_test)],
    verbose=True
)
# XGBClassifier(
#     objective="binary:logistic",
#     eval_metric="logloss",
#     learning_rate=0.1,
#     max_depth=4,
#     n_estimators=100,
#     use_label_encoder=False

# Make predictions
y_pred = clf_xgb.predict(X_test)

# Evaluate
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy * 100:.2f}%")

y_pred = clf_xgb.predict(X_test)
y_pred_proba = clf_xgb.predict_proba(X_test)[:, 1]

# Evaluate the model
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))

# prompt: add roc curve feature importance and confusion matrix

from sklearn.metrics import roc_curve, auc
import matplotlib.pyplot as plt
import seaborn as sns
# ROC Curve
fpr, tpr, thresholds = roc_curve(y_test, y_pred_proba)
roc_auc = auc(fpr, tpr)
plt.figure()
plt.plot(fpr, tpr, color='darkorange', lw=2, label='ROC curve (area = %0.2f)' % roc_auc)
plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic')
plt.legend(loc="lower right")
plt.show()
# Feature Importance
xgb.plot_importance(clf_xgb)
plt.show()
# Confusion Matrix
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', cbar=False,
            xticklabels=['Negative', 'Positive'], yticklabels=['Negative', 'Positive'])
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()